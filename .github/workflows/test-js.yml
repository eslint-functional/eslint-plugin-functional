name: Test

on:
  pull_request:
  workflow_dispatch:
  workflow_call:

jobs:
  test_js:
    name: "Test - Node: ${{ matrix.node_version }} - TS: ${{ matrix.ts_version }} - OS: ${{ matrix.os }}"
    strategy:
      fail-fast: false
      matrix:
        os:
          - "ubuntu-latest"
        node_version:
          - "16"
          - "18"
        ts_version:
          - "next"
          - "latest"
          - "4.0.2"
          - "JS"
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.ts_version == 'next' }}
    env:
      REPORT_COVERAGE: ${{ fromJSON('["false", "true"]')[matrix.node_version == '18' && matrix.os == 'ubuntu-latest'] }}
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/prepare

      - name: Build
        run: pnpm build

      - name: Compile Tests
        run: pnpm run build-tests

      - name: Setup NodeJs ${{ matrix.node_version }} for testing
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}

      - name: Remove Dev TypeScript
        run: pnpm remove typescript

      - name: Add TypeScript "${{ matrix.ts_version }}"
        if: matrix.ts_version != 'JS'
        run: pnpm add -D typescript@"${{ matrix.ts_version }}"

      - name: Remove incompatible settings for ts 4.0.2
        if: matrix.ts_version == '4.0.2'
        run: |
          node -e '
            const fs = require("fs");
            const filename = "./tsconfig.base.json";
            const tsConfig = require(filename);
            delete tsConfig.compilerOptions.exactOptionalPropertyTypes;
            delete tsConfig.compilerOptions.noPropertyAccessFromIndexSignature;
            delete tsConfig.compilerOptions.noUncheckedIndexedAccess;
            const tsConfigString = JSON.stringify(tsConfig, undefined, 2);
            fs.writeFileSync(filename, tsConfigString, { encoding: "utf8" });
            console.log("TS Config updated successfully.");
          '

      - name: Run Tests
        run: pnpm test-compiled

      - name: Report coverage
        uses: codecov/codecov-action@v3.1.1
        if: env.REPORT_COVERAGE == 'true'
        with:
          file: coverage/lcov.info
          flags: ${{ matrix.ts_version }}
