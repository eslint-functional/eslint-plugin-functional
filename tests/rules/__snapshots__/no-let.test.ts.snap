// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`no-let > javascript - es latest > options > allowInForLoopInit > should not report let declarations in for loop init 1`] = `
{
  "fixed": false,
  "messages": [
    {
      "column": 1,
      "endColumn": 7,
      "endLine": 1,
      "line": 1,
      "message": "Unexpected let, use const instead.",
      "messageId": "generic",
      "nodeType": "VariableDeclaration",
      "ruleId": "no-let",
      "severity": 2,
    },
    {
      "column": 1,
      "endColumn": 11,
      "endLine": 2,
      "line": 2,
      "message": "Unexpected let, use const instead.",
      "messageId": "generic",
      "nodeType": "VariableDeclaration",
      "ruleId": "no-let",
      "severity": 2,
    },
  ],
  "output": "let x;
let y = 0;",
  "steps": [
    {
      "fixed": false,
      "messages": [
        {
          "column": 1,
          "endColumn": 7,
          "endLine": 1,
          "line": 1,
          "message": "Unexpected let, use const instead.",
          "messageId": "generic",
          "nodeType": "VariableDeclaration",
          "ruleId": "rule-to-test/no-let",
          "severity": 2,
        },
        {
          "column": 1,
          "endColumn": 11,
          "endLine": 2,
          "line": 2,
          "message": "Unexpected let, use const instead.",
          "messageId": "generic",
          "nodeType": "VariableDeclaration",
          "ruleId": "rule-to-test/no-let",
          "severity": 2,
        },
      ],
      "output": "let x;
let y = 0;",
    },
  ],
}
`;

exports[`no-let > javascript - es latest > options > allowInFunctions > should not report let declarations in arrow function declarations 1`] = `
{
  "fixed": false,
  "messages": [
    {
      "column": 1,
      "endColumn": 7,
      "endLine": 1,
      "line": 1,
      "message": "Unexpected let, use const instead.",
      "messageId": "generic",
      "nodeType": "VariableDeclaration",
      "ruleId": "no-let",
      "severity": 2,
    },
    {
      "column": 1,
      "endColumn": 11,
      "endLine": 2,
      "line": 2,
      "message": "Unexpected let, use const instead.",
      "messageId": "generic",
      "nodeType": "VariableDeclaration",
      "ruleId": "no-let",
      "severity": 2,
    },
  ],
  "output": "let x;
let y = 0;",
  "steps": [
    {
      "fixed": false,
      "messages": [
        {
          "column": 1,
          "endColumn": 7,
          "endLine": 1,
          "line": 1,
          "message": "Unexpected let, use const instead.",
          "messageId": "generic",
          "nodeType": "VariableDeclaration",
          "ruleId": "rule-to-test/no-let",
          "severity": 2,
        },
        {
          "column": 1,
          "endColumn": 11,
          "endLine": 2,
          "line": 2,
          "message": "Unexpected let, use const instead.",
          "messageId": "generic",
          "nodeType": "VariableDeclaration",
          "ruleId": "rule-to-test/no-let",
          "severity": 2,
        },
      ],
      "output": "let x;
let y = 0;",
    },
  ],
}
`;

exports[`no-let > javascript - es latest > options > allowInFunctions > should not report let declarations in function declarations 1`] = `
{
  "fixed": false,
  "messages": [
    {
      "column": 1,
      "endColumn": 7,
      "endLine": 1,
      "line": 1,
      "message": "Unexpected let, use const instead.",
      "messageId": "generic",
      "nodeType": "VariableDeclaration",
      "ruleId": "no-let",
      "severity": 2,
    },
    {
      "column": 1,
      "endColumn": 11,
      "endLine": 2,
      "line": 2,
      "message": "Unexpected let, use const instead.",
      "messageId": "generic",
      "nodeType": "VariableDeclaration",
      "ruleId": "no-let",
      "severity": 2,
    },
  ],
  "output": "let x;
let y = 0;",
  "steps": [
    {
      "fixed": false,
      "messages": [
        {
          "column": 1,
          "endColumn": 7,
          "endLine": 1,
          "line": 1,
          "message": "Unexpected let, use const instead.",
          "messageId": "generic",
          "nodeType": "VariableDeclaration",
          "ruleId": "rule-to-test/no-let",
          "severity": 2,
        },
        {
          "column": 1,
          "endColumn": 11,
          "endLine": 2,
          "line": 2,
          "message": "Unexpected let, use const instead.",
          "messageId": "generic",
          "nodeType": "VariableDeclaration",
          "ruleId": "rule-to-test/no-let",
          "severity": 2,
        },
      ],
      "output": "let x;
let y = 0;",
    },
  ],
}
`;

exports[`no-let > javascript - es latest > options > allowInFunctions > should not report let declarations in method declarations 1`] = `
{
  "fixed": false,
  "messages": [
    {
      "column": 1,
      "endColumn": 7,
      "endLine": 1,
      "line": 1,
      "message": "Unexpected let, use const instead.",
      "messageId": "generic",
      "nodeType": "VariableDeclaration",
      "ruleId": "no-let",
      "severity": 2,
    },
    {
      "column": 1,
      "endColumn": 11,
      "endLine": 2,
      "line": 2,
      "message": "Unexpected let, use const instead.",
      "messageId": "generic",
      "nodeType": "VariableDeclaration",
      "ruleId": "no-let",
      "severity": 2,
    },
  ],
  "output": "let x;
let y = 0;",
  "steps": [
    {
      "fixed": false,
      "messages": [
        {
          "column": 1,
          "endColumn": 7,
          "endLine": 1,
          "line": 1,
          "message": "Unexpected let, use const instead.",
          "messageId": "generic",
          "nodeType": "VariableDeclaration",
          "ruleId": "rule-to-test/no-let",
          "severity": 2,
        },
        {
          "column": 1,
          "endColumn": 11,
          "endLine": 2,
          "line": 2,
          "message": "Unexpected let, use const instead.",
          "messageId": "generic",
          "nodeType": "VariableDeclaration",
          "ruleId": "rule-to-test/no-let",
          "severity": 2,
        },
      ],
      "output": "let x;
let y = 0;",
    },
  ],
}
`;

exports[`no-let > javascript - es latest > should report let declarations 1`] = `
{
  "fixed": false,
  "messages": [
    {
      "column": 1,
      "endColumn": 7,
      "endLine": 1,
      "line": 1,
      "message": "Unexpected let, use const instead.",
      "messageId": "generic",
      "nodeType": "VariableDeclaration",
      "ruleId": "no-let",
      "severity": 2,
    },
    {
      "column": 3,
      "endColumn": 9,
      "endLine": 4,
      "line": 4,
      "message": "Unexpected let, use const instead.",
      "messageId": "generic",
      "nodeType": "VariableDeclaration",
      "ruleId": "no-let",
      "severity": 2,
    },
    {
      "column": 3,
      "endColumn": 13,
      "endLine": 5,
      "line": 5,
      "message": "Unexpected let, use const instead.",
      "messageId": "generic",
      "nodeType": "VariableDeclaration",
      "ruleId": "no-let",
      "severity": 2,
    },
  ],
  "output": "let x;

function foo() {
  let y;
  let z = 0;
}",
  "steps": [
    {
      "fixed": false,
      "messages": [
        {
          "column": 1,
          "endColumn": 7,
          "endLine": 1,
          "line": 1,
          "message": "Unexpected let, use const instead.",
          "messageId": "generic",
          "nodeType": "VariableDeclaration",
          "ruleId": "rule-to-test/no-let",
          "severity": 2,
        },
        {
          "column": 3,
          "endColumn": 9,
          "endLine": 4,
          "line": 4,
          "message": "Unexpected let, use const instead.",
          "messageId": "generic",
          "nodeType": "VariableDeclaration",
          "ruleId": "rule-to-test/no-let",
          "severity": 2,
        },
        {
          "column": 3,
          "endColumn": 13,
          "endLine": 5,
          "line": 5,
          "message": "Unexpected let, use const instead.",
          "messageId": "generic",
          "nodeType": "VariableDeclaration",
          "ruleId": "rule-to-test/no-let",
          "severity": 2,
        },
      ],
      "output": "let x;

function foo() {
  let y;
  let z = 0;
}",
    },
  ],
}
`;
