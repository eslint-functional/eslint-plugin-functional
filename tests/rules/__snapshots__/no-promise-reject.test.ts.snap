// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`no-promise-reject > javascript - es latest > reports Promise.reject 1`] = `
{
  "fixed": false,
  "messages": [
    {
      "column": 10,
      "endColumn": 39,
      "endLine": 2,
      "line": 2,
      "message": "Unexpected rejection, resolve an error instead.",
      "messageId": "generic",
      "nodeType": "CallExpression",
      "ruleId": "no-promise-reject",
      "severity": 2,
    },
  ],
  "output": "function foo() {
  return Promise.reject("hello world");
}",
  "steps": [
    {
      "fixed": false,
      "messages": [
        {
          "column": 10,
          "endColumn": 39,
          "endLine": 2,
          "line": 2,
          "message": "Unexpected rejection, resolve an error instead.",
          "messageId": "generic",
          "nodeType": "CallExpression",
          "ruleId": "rule-to-test/no-promise-reject",
          "severity": 2,
        },
      ],
      "output": "function foo() {
  return Promise.reject("hello world");
}",
    },
  ],
}
`;

exports[`no-promise-reject > javascript - es latest > reports new Promise(reject) 1`] = `
{
  "fixed": false,
  "messages": [
    {
      "column": 32,
      "endColumn": 38,
      "endLine": 2,
      "line": 2,
      "message": "Unexpected rejection, resolve an error instead.",
      "messageId": "generic",
      "nodeType": "Identifier",
      "ruleId": "no-promise-reject",
      "severity": 2,
    },
  ],
  "output": "function foo() {
  return new Promise((resolve, reject) => {
    reject("hello world");
  });
}",
  "steps": [
    {
      "fixed": false,
      "messages": [
        {
          "column": 32,
          "endColumn": 38,
          "endLine": 2,
          "line": 2,
          "message": "Unexpected rejection, resolve an error instead.",
          "messageId": "generic",
          "nodeType": "Identifier",
          "ruleId": "rule-to-test/no-promise-reject",
          "severity": 2,
        },
      ],
      "output": "function foo() {
  return new Promise((resolve, reject) => {
    reject("hello world");
  });
}",
    },
  ],
}
`;

exports[`no-promise-reject > javascript - es latest > reports throw in async functions 1`] = `
{
  "fixed": false,
  "messages": [
    {
      "column": 3,
      "endColumn": 34,
      "endLine": 2,
      "line": 2,
      "message": "Unexpected rejection, resolve an error instead.",
      "messageId": "generic",
      "nodeType": "ThrowStatement",
      "ruleId": "no-promise-reject",
      "severity": 2,
    },
  ],
  "output": "async function foo() {
  throw new Error("hello world");
}",
  "steps": [
    {
      "fixed": false,
      "messages": [
        {
          "column": 3,
          "endColumn": 34,
          "endLine": 2,
          "line": 2,
          "message": "Unexpected rejection, resolve an error instead.",
          "messageId": "generic",
          "nodeType": "ThrowStatement",
          "ruleId": "rule-to-test/no-promise-reject",
          "severity": 2,
        },
      ],
      "output": "async function foo() {
  throw new Error("hello world");
}",
    },
  ],
}
`;

exports[`no-promise-reject > javascript - es latest > reports throw in try without catch in async functions 1`] = `
{
  "fixed": false,
  "messages": [
    {
      "column": 5,
      "endColumn": 30,
      "endLine": 3,
      "line": 3,
      "message": "Unexpected rejection, resolve an error instead.",
      "messageId": "generic",
      "nodeType": "ThrowStatement",
      "ruleId": "no-promise-reject",
      "severity": 2,
    },
  ],
  "output": "async function foo() {
  try {
    throw new Error("hello");
  } finally {
    console.log("world");
  }
}",
  "steps": [
    {
      "fixed": false,
      "messages": [
        {
          "column": 5,
          "endColumn": 30,
          "endLine": 3,
          "line": 3,
          "message": "Unexpected rejection, resolve an error instead.",
          "messageId": "generic",
          "nodeType": "ThrowStatement",
          "ruleId": "rule-to-test/no-promise-reject",
          "severity": 2,
        },
      ],
      "output": "async function foo() {
  try {
    throw new Error("hello");
  } finally {
    console.log("world");
  }
}",
    },
  ],
}
`;
